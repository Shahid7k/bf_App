{"version":3,"sources":["list.js","CardF.js","CardList.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["list","pic","name","no","yesterday","topics","CardF","prop","style","background","className","src","alt","height","past","CardList","map","x","i","key","SearchBox","sfield","onSearch","onChange","type","placeholder","App","onSearchF","event","setState","target","value","state","filterSearch","this","filter","friend","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qMAAaA,EAAO,CACpB,CACCC,IAAI,wCACJC,KAAO,SACPC,GAAG,OACHC,UAAW,eACXC,OAAO,sBAGR,CACCJ,IAAI,wCACJC,KAAO,WACPC,GAAG,OACHC,UAAW,2BACXC,OAAO,6BAER,CACCJ,IAAI,wCACJC,KAAO,UACPC,GAAG,OACHC,UAAW,qBACXC,OAAO,iCAER,CACCJ,IAAI,yCACJC,KAAO,QACPC,GAAG,OACHC,UAAW,kCACXC,OAAO,SCdOC,G,MAZD,SAACC,GACd,OACC,yBAAKC,MAAO,CAACC,WAAW,uEAAwEC,UAAU,qDACzG,yBAAKC,IAAKJ,EAAKN,IAAKW,IAAI,MAAMJ,MAAO,CAACK,OAAO,OAC7C,oCAAS,0BAAMH,UAAU,aAAaH,EAAKL,OAC3C,6CAAmBK,EAAKJ,IACxB,2BAAI,0BAAMO,UAAU,cAAhB,kBAAJ,IAAwDH,EAAKF,QAC1D,2BAAI,0BAAMK,UAAU,SAAhB,eAAJ,IAAgDH,EAAKO,SCG5CC,EATE,SAAC,GAAa,IAAZf,EAAW,EAAXA,KAClB,OAEC,6BACCA,EAAKgB,KAAI,SAACC,EAAEC,GAAH,OAAQ,kBAAC,EAAD,CAAOC,IAAKD,EAAGjB,IAAKgB,EAAEhB,IAAKC,KAAMe,EAAEf,KAAMC,GAAIc,EAAEd,GAAIE,OAAQY,EAAEZ,OAAQS,KAAMG,EAAEb,iBCKlFgB,EAVG,SAAC,GAAuB,EAAtBC,OAAuB,IAAfC,EAAc,EAAdA,SAC3B,OACC,6BACA,2BAAOC,SAAUD,EAAUZ,UAAU,8CAA8Cc,KAAK,SAASC,YAAY,8BC6BhGC,E,kDA5Bd,aAAc,IAAD,8BACZ,gBAMDC,UAAY,SAACC,GACZ,EAAKC,SAAS,CAACR,OAAOO,EAAME,OAAOC,SANnC,EAAKC,MAAM,CACVhC,KAAKA,EACLqB,OAAO,IAJI,E,qDAUJ,IAAD,OACDY,EAAcC,KAAKF,MAAMhC,KAAKmC,QAAO,SAAAC,GAC1C,OAAQA,EAAOjC,GAAGkC,cAAcC,SAAS,EAAKN,MAAMX,OAAOgB,gBAAgBD,EAAOlC,KAAKmC,cAAcC,SAAS,EAAKN,MAAMX,OAAOgB,kBAEjI,OACC,yBAAK3B,UAAU,MAEd,yBAAKA,UAAU,mCACd,kDACA,wBAAIA,UAAU,YAAd,+CAGD,kBAAC,EAAD,CAAWY,SAAUY,KAAKP,YAC1B,kBAAC,EAAD,CAAU3B,KAAMiC,S,GAxBFM,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7687c498.chunk.js","sourcesContent":["export const list = [\r\n{\r\n\tpic:\"https://i.ibb.co/8B6HrXM/IMG-5983.jpg\",\r\n\tname : \"Shahid\",\r\n\tno:\"1285\",\r\n\tyesterday: \" Basic React\",\r\n\ttopics:\"Alittle more React\"\r\n\r\n},\r\n{\r\n\tpic:\"https://i.ibb.co/NY97cDN/IMG-5897.jpg\",\r\n\tname : \"Shraddha\",\r\n\tno:\"1291\",\r\n\tyesterday: \" Amit Sir Notes Revision\",\r\n\ttopics:\"Algo-Course : Week 2 Quiz\"\r\n},\r\n{\r\n\tpic:\"https://i.ibb.co/QKskJ77/IMG-5957.jpg\",\r\n\tname : \"Shritha\",\r\n\tno:\"1292\",\r\n\tyesterday: \" Coding & Decoding\",\r\n\ttopics:\"Emo.. Herpine reply e ivvadu.\"\r\n},\r\n{\r\n\tpic:\"https://i.ibb.co/4VXkdww/IMG-5978.jpg?\",\r\n\tname : \"Snake\",\r\n\tno:\"12A7\",\r\n\tyesterday: \" Cloud Computing lo edo Chapter\",\r\n\ttopics:\"EPAM\"\r\n}\r\n];\r\n\r\n","import React from 'react'\r\nimport 'tachyons';\r\nconst CardF = (prop) => {\r\n\treturn (\r\n\t\t<div style={{background:\"linear-gradient(to right, rgba(255,255,255,0.2), rgba(59,81,100,1))\"}} className=\"tc shadow-5 bg-light-blue bg dib br3 pa3 ma2 grow\">\r\n\t\t\t<img src={prop.pic} alt=\"pic\" style={{height:200}}  />\r\n\t\t\t<h3>Name:<span className=\"dark-blue\">{prop.name}</span></h3>\r\n\t\t\t<h5>Roll Number : {prop.no}</h5>\r\n\t\t\t<p ><span className=\"b dark-red\">Today's Topic:</span> {prop.topics}</p>\r\n\t   \t\t<p ><span className=\"b red\">Old Topics:</span> {prop.past}</p>\r\n\t   \t\t\r\n\t   \t</div>\r\n\t);\r\n}\r\nexport default CardF;","import React from 'react';\r\nimport CardF from  './CardF'; \r\n\r\nconst CardList = ({list})  => {\r\n\treturn (\r\n\t\t\r\n\t\t<div>\r\n\t\t{list.map((x,i) =><CardF key={i} pic={x.pic} name={x.name} no={x.no} topics={x.topics} past={x.yesterday}/>)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({sfield, onSearch}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t<input onChange={onSearch} className=\"w-30 br4  pa3 b--blue bg-navy white calisto\" type=\"search\" placeholder=\"Find name or RollNumber\"/>\r\n\t\t\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport {list} from './list';\r\nimport CardList from \"./CardList\";\r\nimport SearchBox from './SearchBox';\r\n\r\nclass App extends React.Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\tlist:list,\r\n\t\t\tsfield:''\r\n\t\t}\r\n\t}\r\n\tonSearchF = (event) => {\r\n\t\tthis.setState({sfield:event.target.value});\r\n\t}\r\n\trender(){\r\n\t\tconst filterSearch= this.state.list.filter(friend=>{\r\n\t\t\treturn (friend.no.toLowerCase().includes(this.state.sfield.toLowerCase())||friend.name.toLowerCase().includes(this.state.sfield.toLowerCase()));\r\n\t\t});\r\n\t\treturn (\r\n\t\t\t<div className=\"tc\">\r\n\r\n\t\t\t\t<div className=\"tc br2 ma1 dib bg-light-purple \" >\r\n\t\t\t\t\t<h2> Our To-Do Lists! </h2>\r\n\t\t\t\t\t<h6 className=\"black-70\">..... which we aren't following that much!</h6> \r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<SearchBox onSearch={this.onSearchF} />\r\n\t\t\t\t<CardList list={filterSearch}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}